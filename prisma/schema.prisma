// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic-semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic-faculties")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  OfferedCourses    OfferedCourse[]

  @@map("academic-departments")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId           String
  courses                     CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id          String   @id @default(uuid())
  room_number String
  floor       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  buildingId                  String
  building                    Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id              String                @id @default(uuid())
  title           String
  code            String
  credits         Int                   @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  preRequisite    corseToPreRequisite[] @relation("courseToPrequisite")
  preRequisiteFor corseToPreRequisite[] @relation("preRequisiteToCourse")
  faculties       CourseFaculty[]
  OfferedCourses  OfferedCourse[]

  @@map("courses")
}

model corseToPreRequisite {
  courseId       String
  preRequisiteId String
  course         Course @relation(fields: [courseId], references: [id], name: "courseToPrequisite")
  preRequisite   Course @relation(fields: [preRequisiteId], references: [id], name: "preRequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                          String                       @id @default(uuid())
  startDate                   DateTime
  endDate                     DateTime
  status                      SemesterRegistrationStatus   @default(UPCOMING)
  minCredit                   Int                          @default(0)
  maxCredit                   Int                          @default(0)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  academicSemesterId          String
  academicSemester            AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  offeredCourses              OfferedCourse[]
  offeredCourseSections       OfferedCourseSection[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("semester_registration")
}

model OfferedCourse {
  id                     String                 @id @default(uuid())
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  courseId               String
  course                 Course                 @relation(fields: [courseId], references: [id])
  academicDepartmentId   String
  academicDepartment     AcademicDepartment     @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                          String                       @id @default(uuid())
  title                       String
  maxCapacity                 String
  currentlyEnrolledStudents   Int                          @default(0)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  offeredCourseId             String
  offeredCourse               OfferedCourse                @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId      String
  semesterRegistration        SemesterRegistration         @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeedDays
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

enum WeedDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
